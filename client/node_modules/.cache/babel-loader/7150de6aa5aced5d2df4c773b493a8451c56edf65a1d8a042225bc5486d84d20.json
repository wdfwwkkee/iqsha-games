{"ast":null,"code":"// src/hydration.ts\nfunction dehydrateMutation(mutation) {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && {\n      scope: mutation.options.scope\n    }),\n    ...(mutation.meta && {\n      meta: mutation.meta\n    })\n  };\n}\nfunction dehydrateQuery(query) {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && {\n      meta: query.meta\n    })\n  };\n}\nfunction defaultShouldDehydrateMutation(mutation) {\n  return mutation.state.isPaused;\n}\nfunction defaultShouldDehydrateQuery(query) {\n  return query.state.status === \"success\";\n}\nfunction dehydrate(client, options = {}) {\n  const filterMutation = options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation;\n  const mutations = client.getMutationCache().getAll().flatMap(mutation => filterMutation(mutation) ? [dehydrateMutation(mutation)] : []);\n  const filterQuery = options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery;\n  const queries = client.getQueryCache().getAll().flatMap(query => filterQuery(query) ? [dehydrateQuery(query)] : []);\n  return {\n    mutations,\n    queries\n  };\n}\nfunction hydrate(client, dehydratedState, options) {\n  if (typeof dehydratedState !== \"object\" || dehydratedState === null) {\n    return;\n  }\n  const mutationCache = client.getMutationCache();\n  const queryCache = client.getQueryCache();\n  const mutations = dehydratedState.mutations || [];\n  const queries = dehydratedState.queries || [];\n  mutations.forEach(({\n    state,\n    ...mutationOptions\n  }) => {\n    mutationCache.build(client, {\n      ...options?.defaultOptions?.mutations,\n      ...mutationOptions\n    }, state);\n  });\n  queries.forEach(({\n    queryKey,\n    state,\n    queryHash,\n    meta\n  }) => {\n    const query = queryCache.get(queryHash);\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        const {\n          fetchStatus: _ignored,\n          ...dehydratedQueryState\n        } = state;\n        query.setState(dehydratedQueryState);\n      }\n      return;\n    }\n    queryCache.build(client, {\n      ...options?.defaultOptions?.queries,\n      queryKey,\n      queryHash,\n      meta\n    },\n    // Reset fetch status to idle to avoid\n    // query being stuck in fetching state upon hydration\n    {\n      ...state,\n      fetchStatus: \"idle\"\n    });\n  });\n}\nexport { defaultShouldDehydrateMutation, defaultShouldDehydrateQuery, dehydrate, hydrate };","map":{"version":3,"names":["dehydrateMutation","mutation","mutationKey","options","state","scope","meta","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","filterMutation","shouldDehydrateMutation","mutations","getMutationCache","getAll","flatMap","filterQuery","shouldDehydrateQuery","queries","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","forEach","mutationOptions","build","defaultOptions","get","dataUpdatedAt","fetchStatus","_ignored","dehydratedQueryState","setState"],"sources":["C:\\Users\\slava\\Documents\\vscode\\react\\iqsha-games\\iqsha-games\\client\\node_modules\\@tanstack\\query-core\\src\\hydration.ts"],"sourcesContent":["import type {\n  MutationKey,\n  MutationMeta,\n  MutationOptions,\n  MutationScope,\n  QueryKey,\n  QueryMeta,\n  QueryOptions,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport type { Query, QueryState } from './query'\nimport type { Mutation, MutationState } from './mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  shouldDehydrateMutation?: (mutation: Mutation) => boolean\n  shouldDehydrateQuery?: (query: Query) => boolean\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n  meta?: MutationMeta\n  scope?: MutationScope\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n  meta?: QueryMeta\n}\n\nexport interface DehydratedState {\n  mutations: Array<DehydratedMutation>\n  queries: Array<DehydratedQuery>\n}\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n    ...(mutation.options.scope && { scope: mutation.options.scope }),\n    ...(mutation.meta && { meta: mutation.meta }),\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n    ...(query.meta && { meta: query.meta }),\n  }\n}\n\nexport function defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nexport function defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options: DehydrateOptions = {},\n): DehydratedState {\n  const filterMutation =\n    options.shouldDehydrateMutation ?? defaultShouldDehydrateMutation\n\n  const mutations = client\n    .getMutationCache()\n    .getAll()\n    .flatMap((mutation) =>\n      filterMutation(mutation) ? [dehydrateMutation(mutation)] : [],\n    )\n\n  const filterQuery =\n    options.shouldDehydrateQuery ?? defaultShouldDehydrateQuery\n\n  const queries = client\n    .getQueryCache()\n    .getAll()\n    .flatMap((query) => (filterQuery(query) ? [dehydrateQuery(query)] : []))\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions,\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(({ state, ...mutationOptions }) => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        ...mutationOptions,\n      },\n      state,\n    )\n  })\n\n  queries.forEach(({ queryKey, state, queryHash, meta }) => {\n    const query = queryCache.get(queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < state.dataUpdatedAt) {\n        // omit fetchStatus from dehydrated state\n        // so that query stays in its current fetchStatus\n        const { fetchStatus: _ignored, ...dehydratedQueryState } = state\n        query.setState(dehydratedQueryState)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey,\n        queryHash,\n        meta,\n      },\n      // Reset fetch status to idle to avoid\n      // query being stuck in fetching state upon hydration\n      {\n        ...state,\n        fetchStatus: 'idle',\n      },\n    )\n  })\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}